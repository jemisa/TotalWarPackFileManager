namespace BrightIdeasSoftware
{
    using System;
    using System.ComponentModel;
    using System.Drawing;
    using System.Windows.Forms;

    [Browsable(false)]
    public class OLVColumn : ColumnHeader
    {
        private AspectGetterDelegate aspectGetter;
        private bool aspectGetterAutoGenerated;
        private Munger aspectMunger;
        private string aspectName;
        private AspectPutterDelegate aspectPutter;
        private AspectToStringConverterDelegate aspectToStringConverter;
        private string aspectToStringFormat;
        private bool autoCompleteEditor;
        private bool checkBoxes;
        private int freeSpaceProportion;
        private GroupFormatterDelegate groupFormatter;
        private GroupKeyGetterDelegate groupKeyGetter;
        private GroupKeyToTitleConverterDelegate groupKeyToTitleConverter;
        private string groupWithItemCountFormat;
        private string groupWithItemCountSingularFormat;
        private Font headerFont;
        private Color headerForeColor;
        private bool hyperlink;
        private Munger imageAspectMunger;
        private string imageAspectName;
        private ImageGetterDelegate imageGetter;
        private bool isEditable;
        private bool isTileViewColumn;
        private bool isVisible;
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int LastDisplayIndex;
        private int maxWidth;
        private int minWidth;
        private IRenderer renderer;
        private HorizontalAlignment? textAlign;
        private string toolTipText;
        private bool triStateCheckBoxes;
        private bool useInitialLetterForGroup;

        public OLVColumn()
        {
            this.autoCompleteEditor = true;
            this.isEditable = true;
            this.isVisible = true;
            this.LastDisplayIndex = -1;
            this.maxWidth = -1;
            this.minWidth = -1;
        }

        public OLVColumn(string title, string aspect) : this()
        {
            base.Text = title;
            this.AspectName = aspect;
        }

        public string ConvertGroupKeyToTitle(object value)
        {
            if (this.groupKeyToTitleConverter == null)
            {
                if (value == null)
                {
                    return "{null}";
                }
                return this.ValueToString(value);
            }
            return this.groupKeyToTitleConverter(value);
        }

        public object GetAspectByName(object rowObject)
        {
            if (this.aspectMunger == null)
            {
                this.aspectMunger = new Munger(this.AspectName);
            }
            return this.aspectMunger.GetValue(rowObject);
        }

        public CheckState GetCheckState(object rowObject)
        {
            if (!this.CheckBoxes)
            {
                return CheckState.Unchecked;
            }
            bool? nullable = this.GetValue(rowObject) as bool?;
            if (nullable.HasValue)
            {
                if (nullable.Value)
                {
                    return CheckState.Checked;
                }
                return CheckState.Unchecked;
            }
            return CheckState.Indeterminate;
        }

        public string GetCheckStateImage(object rowObject)
        {
            switch (this.GetCheckState(rowObject))
            {
                case CheckState.Checked:
                    return "checkbox-checked";

                case CheckState.Unchecked:
                    return "checkbox-unchecked";
            }
            return "checkbox-indeterminate";
        }

        public object GetGroupKey(object rowObject)
        {
            if (this.groupKeyGetter == null)
            {
                object obj2 = this.GetValue(rowObject);
                string str = obj2 as string;
                if (((str != null) && this.UseInitialLetterForGroup) && (str.Length > 0))
                {
                    obj2 = str.Substring(0, 1).ToUpper();
                }
                return obj2;
            }
            return this.groupKeyGetter(rowObject);
        }

        public object GetImage(object rowObject)
        {
            if (this.CheckBoxes)
            {
                return this.GetCheckStateImage(rowObject);
            }
            if (this.ImageGetter != null)
            {
                return this.ImageGetter(rowObject);
            }
            if (!string.IsNullOrEmpty(this.ImageAspectName))
            {
                if (this.imageAspectMunger == null)
                {
                    this.imageAspectMunger = new Munger(this.ImageAspectName);
                }
                return this.imageAspectMunger.GetValue(rowObject);
            }
            if (!string.IsNullOrEmpty(base.ImageKey))
            {
                return base.ImageKey;
            }
            return base.ImageIndex;
        }

        public string GetStringValue(object rowObject)
        {
            return this.ValueToString(this.GetValue(rowObject));
        }

        public object GetValue(object rowObject)
        {
            if (this.AspectGetter == null)
            {
                return this.GetAspectByName(rowObject);
            }
            return this.AspectGetter(rowObject);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions)
        {
            this.MakeGroupies<T>(values, descriptions, null, null, null);
        }

        public void MakeGroupies(object[] values, string[] descriptions)
        {
            this.MakeGroupies<object>(values, descriptions, null, null, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images)
        {
            this.MakeGroupies<T>(values, descriptions, images, null, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images, string[] subtitles)
        {
            this.MakeGroupies<T>(values, descriptions, images, subtitles, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images, string[] subtitles, string[] tasks)
        {
            if ((values.Length + 1) != descriptions.Length)
            {
                throw new ArgumentException("descriptions must have one more element than values.");
            }
            this.GroupKeyGetter = delegate (object row) {
                object obj2 = this.GetValue(row);
                if ((obj2 == null) || (obj2 == DBNull.Value))
                {
                    return -1;
                }
                IComparable comparable = (IComparable) obj2;
                for (int j = 0; j < values.Length; j++)
                {
                    if (comparable.CompareTo(values[j]) < 0)
                    {
                        return j;
                    }
                }
                return descriptions.Length - 1;
            };
            this.GroupKeyToTitleConverter = delegate (object key) {
                if (((int) key) < 0)
                {
                    return "";
                }
                return descriptions[(int) key];
            };
            this.GroupFormatter = delegate (OLVGroup group, GroupingParameters parms) {
                int index = (int) group.Key;
                if (index >= 0)
                {
                    if ((images != null) && (index < images.Length))
                    {
                        group.TitleImage = images[index];
                    }
                    if ((subtitles != null) && (index < subtitles.Length))
                    {
                        group.Subtitle = subtitles[index];
                    }
                    if ((tasks != null) && (index < tasks.Length))
                    {
                        group.Task = tasks[index];
                    }
                }
            };
        }

        public void PutAspectByName(object rowObject, object newValue)
        {
            if (this.aspectMunger == null)
            {
                this.aspectMunger = new Munger(this.AspectName);
            }
            this.aspectMunger.PutValue(rowObject, newValue);
        }

        public void PutCheckState(object rowObject, CheckState newState)
        {
            if (newState == CheckState.Checked)
            {
                this.PutValue(rowObject, true);
            }
            else if (newState == CheckState.Unchecked)
            {
                this.PutValue(rowObject, false);
            }
            else
            {
                this.PutValue(rowObject, null);
            }
        }

        public void PutValue(object rowObject, object newValue)
        {
            if (this.aspectPutter == null)
            {
                this.PutAspectByName(rowObject, newValue);
            }
            else
            {
                this.aspectPutter(rowObject, newValue);
            }
        }

        public string ValueToString(object value)
        {
            if (value == null)
            {
                return "";
            }
            if (this.AspectToStringConverter != null)
            {
                return this.AspectToStringConverter(value);
            }
            string aspectToStringFormat = this.AspectToStringFormat;
            if (string.IsNullOrEmpty(aspectToStringFormat))
            {
                return value.ToString();
            }
            return string.Format(aspectToStringFormat, value);
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public AspectGetterDelegate AspectGetter
        {
            get
            {
                return this.aspectGetter;
            }
            set
            {
                this.aspectGetter = value;
            }
        }

        [Browsable(false), Obsolete("This property is no longer maintained", true), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AspectGetterAutoGenerated
        {
            get
            {
                return this.aspectGetterAutoGenerated;
            }
            set
            {
                this.aspectGetterAutoGenerated = value;
            }
        }

        [Description("The name of the property or method that should be called to get the aspect to display in this column"), Category("Behavior - ObjectListView"), DefaultValue((string) null)]
        public string AspectName
        {
            get
            {
                return this.aspectName;
            }
            set
            {
                this.aspectName = value;
                this.aspectMunger = null;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public AspectPutterDelegate AspectPutter
        {
            get
            {
                return this.aspectPutter;
            }
            set
            {
                this.aspectPutter = value;
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public AspectToStringConverterDelegate AspectToStringConverter
        {
            get
            {
                return this.aspectToStringConverter;
            }
            set
            {
                this.aspectToStringConverter = value;
            }
        }

        [Category("Behavior - ObjectListView"), DefaultValue((string) null), Description("The format string that will be used to convert an aspect to its string representation")]
        public string AspectToStringFormat
        {
            get
            {
                return this.aspectToStringFormat;
            }
            set
            {
                this.aspectToStringFormat = value;
            }
        }

        [DefaultValue(true), Category("Behavior - ObjectListView"), Description("Should the editor for cells of this column use AutoComplete")]
        public bool AutoCompleteEditor
        {
            get
            {
                return this.autoCompleteEditor;
            }
            set
            {
                this.autoCompleteEditor = value;
            }
        }

        [DefaultValue(false), Category("Behavior - ObjectListView"), Description("Should values in this column be treated as a checkbox, rather than a string?")]
        public virtual bool CheckBoxes
        {
            get
            {
                return this.checkBoxes;
            }
            set
            {
                this.checkBoxes = value;
                if (this.Renderer == null)
                {
                    this.Renderer = new CheckStateRenderer();
                }
            }
        }

        [DefaultValue(false), Category("Behavior - ObjectListView"), Description("Will this column resize to fill unoccupied horizontal space in the listview?")]
        public bool FillsFreeSpace
        {
            get
            {
                return (this.FreeSpaceProportion > 0);
            }
            set
            {
                if (value)
                {
                    this.freeSpaceProportion = 1;
                }
                else
                {
                    this.freeSpaceProportion = 0;
                }
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int FreeSpaceProportion
        {
            get
            {
                return this.freeSpaceProportion;
            }
            set
            {
                this.freeSpaceProportion = Math.Max(0, value);
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GroupFormatterDelegate GroupFormatter
        {
            get
            {
                return this.groupFormatter;
            }
            set
            {
                this.groupFormatter = value;
            }
        }

        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public GroupKeyGetterDelegate GroupKeyGetter
        {
            get
            {
                return this.groupKeyGetter;
            }
            set
            {
                this.groupKeyGetter = value;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GroupKeyToTitleConverterDelegate GroupKeyToTitleConverter
        {
            get
            {
                return this.groupKeyToTitleConverter;
            }
            set
            {
                this.groupKeyToTitleConverter = value;
            }
        }

        [Category("Behavior - ObjectListView"), Description("The format to use when suffixing item counts to group titles"), DefaultValue((string) null), Localizable(true)]
        public string GroupWithItemCountFormat
        {
            get
            {
                return this.groupWithItemCountFormat;
            }
            set
            {
                this.groupWithItemCountFormat = value;
            }
        }

        [Browsable(false)]
        public string GroupWithItemCountFormatOrDefault
        {
            get
            {
                if (string.IsNullOrEmpty(this.GroupWithItemCountFormat))
                {
                    if (base.ListView == null)
                    {
                        return "{0} [{1} items]";
                    }
                    return ((ObjectListView) base.ListView).GroupWithItemCountFormatOrDefault;
                }
                return this.GroupWithItemCountFormat;
            }
        }

        [DefaultValue((string) null), Category("Behavior - ObjectListView"), Description("The format to use when suffixing item counts to group titles"), Localizable(true)]
        public string GroupWithItemCountSingularFormat
        {
            get
            {
                return this.groupWithItemCountSingularFormat;
            }
            set
            {
                this.groupWithItemCountSingularFormat = value;
            }
        }

        [Browsable(false)]
        public string GroupWithItemCountSingularFormatOrDefault
        {
            get
            {
                if (string.IsNullOrEmpty(this.GroupWithItemCountSingularFormat))
                {
                    if (base.ListView == null)
                    {
                        return "{0} [{1} item]";
                    }
                    return ((ObjectListView) base.ListView).GroupWithItemCountSingularFormatOrDefault;
                }
                return this.GroupWithItemCountSingularFormat;
            }
        }

        [Description("What font will be used to draw the text of the header of this column"), Category("Appearance - ObjectListView"), DefaultValue(false)]
        public Font HeaderFont
        {
            get
            {
                return this.headerFont;
            }
            set
            {
                this.headerFont = value;
            }
        }

        [Category("Appearance - ObjectListView"), DefaultValue(typeof(Color), ""), Description("What color will be used to draw the text of the header of this column")]
        public Color HeaderForeColor
        {
            get
            {
                return this.headerForeColor;
            }
            set
            {
                this.headerForeColor = value;
            }
        }

        [DefaultValue(false), Category("Behavior - ObjectListView"), Description("Will the text values of this column act like hyperlinks?")]
        public bool Hyperlink
        {
            get
            {
                return this.hyperlink;
            }
            set
            {
                this.hyperlink = value;
            }
        }

        [DefaultValue((string) null), Description("The name of the property that holds the image selector"), Category("Behavior - ObjectListView")]
        public string ImageAspectName
        {
            get
            {
                return this.imageAspectName;
            }
            set
            {
                this.imageAspectName = value;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ImageGetterDelegate ImageGetter
        {
            get
            {
                return this.imageGetter;
            }
            set
            {
                this.imageGetter = value;
            }
        }

        [Category("Behavior - ObjectListView"), Description("Can the value in this column be edited?"), DefaultValue(true)]
        public bool IsEditable
        {
            get
            {
                return this.isEditable;
            }
            set
            {
                this.isEditable = value;
            }
        }

        [Browsable(false)]
        public bool IsFixedWidth
        {
            get
            {
                return (((this.MinimumWidth != -1) && (this.MaximumWidth != -1)) && (this.MinimumWidth >= this.MaximumWidth));
            }
        }

        [Category("Behavior - ObjectListView"), DefaultValue(false), Description("Will this column be used when the view is switched to tile view")]
        public bool IsTileViewColumn
        {
            get
            {
                return this.isTileViewColumn;
            }
            set
            {
                this.isTileViewColumn = value;
            }
        }

        [DefaultValue(true), Category("Behavior - ObjectListView"), Description("Can this column be seen by the user?")]
        public bool IsVisible
        {
            get
            {
                return this.isVisible;
            }
            set
            {
                this.isVisible = value;
            }
        }

        [Category("Behavior - ObjectListView"), DefaultValue(-1), Description("What is the maximum width to which the user can resize this column?")]
        public int MaximumWidth
        {
            get
            {
                return this.maxWidth;
            }
            set
            {
                this.maxWidth = value;
                if ((this.maxWidth != -1) && (base.Width > this.maxWidth))
                {
                    base.Width = this.maxWidth;
                }
            }
        }

        [DefaultValue(-1), Category("Behavior - ObjectListView"), Description("What is the minimum width to which the user can resize this column?")]
        public int MinimumWidth
        {
            get
            {
                return this.minWidth;
            }
            set
            {
                this.minWidth = value;
                if (base.Width < this.minWidth)
                {
                    base.Width = this.minWidth;
                }
            }
        }

        [Category("Behavior - ObjectListView"), DefaultValue((string) null), Description("The renderer will draw this column when the ListView is owner drawn")]
        public IRenderer Renderer
        {
            get
            {
                return this.renderer;
            }
            set
            {
                this.renderer = value;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public RenderDelegate RendererDelegate
        {
            get
            {
                if (this.Renderer is Version1Renderer)
                {
                    return ((Version1Renderer) this.Renderer).RenderDelegate;
                }
                return null;
            }
            set
            {
                if (value == null)
                {
                    this.Renderer = null;
                }
                else
                {
                    this.Renderer = new Version1Renderer(value);
                }
            }
        }

        public HorizontalAlignment TextAlign
        {
            get
            {
                if (this.textAlign.HasValue)
                {
                    return this.textAlign.Value;
                }
                return base.TextAlign;
            }
            set
            {
                this.textAlign = new HorizontalAlignment?(value);
                base.TextAlign = value;
            }
        }

        public StringAlignment TextStringAlign
        {
            get
            {
                switch (this.TextAlign)
                {
                    case HorizontalAlignment.Left:
                        return StringAlignment.Near;

                    case HorizontalAlignment.Right:
                        return StringAlignment.Far;

                    case HorizontalAlignment.Center:
                        return StringAlignment.Center;
                }
                return StringAlignment.Near;
            }
        }

        [Localizable(true), Category("Behavior - ObjectListView"), Description("The tooltip to show when the mouse is hovered over the header of this column"), DefaultValue((string) null)]
        public string ToolTipText
        {
            get
            {
                return this.toolTipText;
            }
            set
            {
                this.toolTipText = value;
            }
        }

        [DefaultValue(false), Description("Should values in this column be treated as a tri-state checkbox?"), Category("Behavior - ObjectListView")]
        public virtual bool TriStateCheckBoxes
        {
            get
            {
                return this.triStateCheckBoxes;
            }
            set
            {
                this.triStateCheckBoxes = value;
                if (!(!value || this.CheckBoxes))
                {
                    this.CheckBoxes = true;
                }
            }
        }

        [Category("Behavior - ObjectListView"), Description("The name of the property or method that should be called to get the aspect to display in this column"), DefaultValue(false)]
        public bool UseInitialLetterForGroup
        {
            get
            {
                return this.useInitialLetterForGroup;
            }
            set
            {
                this.useInitialLetterForGroup = value;
            }
        }
    }
}

